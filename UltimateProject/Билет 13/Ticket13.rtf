{\rtf1\ansi\ansicpg1251\deff0\nouicompat{\fonttbl{\f0\fnil\fcharset204 Calibri;}{\f1\fnil\fcharset0 Calibri;}{\f2\fnil Calibri;}}
{\colortbl ;\red255\green255\blue0;\red0\green0\blue255;}
{\*\generator Riched20 10.0.19041}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\highlight1\b\i\f0\fs22\lang1049\'d1\'e5\'f2\'e5\'e2\'ee\'e5 \'ef\'f0\'ee\'e3\'f0\'e0\'ec\'ec\'e8\'f0\'ee\'e2\'e0\'ed\'e8\'e5 \'f1\'ee\'ea\'e5\'f2\'ee\'e2: \'ef\'ee\'ed\'ff\'f2\'e8\'e5, \'f0\'e0\'e1\'ee\'f2\'e0 \'f1 \'ef\'f0\'ee\'f2\'ee\'ea\'ee\'eb\'e0\'ec\'e8 SMTP \'e8 FTP.\highlight0\f1\lang1033\par
\f0\lang1049\'d0\'e0\'e7\'f0\'e0\'e1\'ee\'f2\'e0\'f2\'fc \'ef\'f0\'e8\'eb\'ee\'e6\'e5\'ed\'e8\'e5 \'ed\'e0 \'ff\'e7\'fb\'ea\'e5 \'d1++ \'f1 \'f4\'f3\'ed\'ea\'f6\'e8\'e5\'e9 \'e3\'e5\'ed\'e5\'f0\'e0\'f6\'e8\'e8 N \'ef\'e0\'f0\'ee\'eb\'e5\'e9. \'d2\'f0\'e5\'e1\'ee\'e2\'e0\'ed\'e8\'ff \'ea \'ef\'e0\'f0\'ee\'eb\'fe \'e7\'e0\'e4\'e0\'e5\'f2\'f1\'ff  \'ef\'ee\'eb\'fc\'e7\'ee\'e2\'e0\'f2\'e5\'eb\'e5\'ec \'e2 \'e2\'e8\'e4\'e5 \'ef\'e0\'f0\'e0\'ec\'e5\'f2\'f0\'ee\'e2: L-\'e4\'eb\'e8\'ed\'e0 \'ef\'e0\'f0\'ee\'eb\'ff, S-\'f1\'f2\'f0\'ee\'ea\'e0 \'f1 \'ee\'e1\'ff\'e7\'e0\'f2\'e5\'eb\'fc\'ed\'fb\'ec\'e8 \'f1\'e8\'ec\'e2\'ee\'eb\'e0\'ec\'e8, \'ca-\'ea\'ee\'eb\'e8\'f7\'e5\'f1\'f2\'e2\'ee \'ee\'e1\'ff\'e7\'e0\'f2\'e5\'eb\'fc\'ed\'fb\'f5 \'f1\'e8\'ec\'e2\'ee\'eb\'ee\'e2.\par
\par
\b0\i0\'d1\'e5\'f2\'e5\'e2\'ee\'e5 \'ef\'f0\'ee\'e3\'f0\'e0\'ec\'ec\'e8\'f0\'ee\'e2\'e0\'ed\'e8\'e5 \'f1\'ee\'ea\'e5\'f2\'ee\'e2 \f2\emdash  \f0\'fd\'f2\'ee \'f1\'ef\'ee\'f1\'ee\'e1 \'ef\'ee\'e4\'ea\'eb\'fe\'f7\'e5\'ed\'e8\'ff \'e4\'e2\'f3\'f5 \'f3\'e7\'eb\'ee\'e2 \'e2 \'f1\'e5\'f2\'e8 \'e4\'eb\'ff \'f1\'e2\'ff\'e7\'e8 \'e4\'f0\'f3\'e3 \'f1 \'e4\'f0\'f3\'e3\'ee\'ec. \'d1\'ee\'ea\'e5\'f2\'fb \'ef\'f0\'e5\'e4\'f1\'f2\'e0\'e2\'eb\'ff\'fe\'f2 \'f1\'ee\'e1\'ee\'e9 \'ef\'f0\'ee\'e3\'f0\'e0\'ec\'ec\'ed\'fb\'e9 \'e8\'ed\'f2\'e5\'f0\'f4\'e5\'e9\'f1 \'e4\'eb\'ff \'f1\'ee\'e7\'e4\'e0\'ed\'e8\'ff \'ea\'e0\'ed\'e0\'eb\'ee\'e2 \'e2\'e7\'e0\'e8\'ec\'ee\'e4\'e5\'e9\'f1\'f2\'e2\'e8\'ff \'ec\'e5\'e6\'e4\'f3 \'f3\'f1\'f2\'f0\'ee\'e9\'f1\'f2\'e2\'e0\'ec\'e8 \'f1 \'f6\'e5\'eb\'fc\'fe \'ee\'e1\'ec\'e5\'ed\'e0 \'e8\'ed\'f4\'ee\'f0\'ec\'e0\'f6\'e8\'e5\'e9.\par
\'d0\'e0\'e1\'ee\'f2\'e0 \'f1 \'ef\'f0\'ee\'f2\'ee\'ea\'ee\'eb\'e0\'ec\'e8 SMTP \'e8 FTP \'ed\'e0 C++ \'e2\'ee\'e7\'ec\'ee\'e6\'ed\'e0 \'f1 \'e8\'f1\'ef\'ee\'eb\'fc\'e7\'ee\'e2\'e0\'ed\'e8\'e5\'ec \'e1\'e8\'e1\'eb\'e8\'ee\'f2\'e5\'ea\'e8 Winsocket. \'c4\'eb\'ff \'f0\'e0\'e1\'ee\'f2\'fb \'f1 \'ef\'ee\'f7\'f2\'ee\'e2\'fb\'ec\'e8 \'f1\'eb\'f3\'e6\'e1\'e0\'ec\'e8 (SMTP \'e8 POP3) \'e2\'fb\'e7\'ee\'e2 \'f4\'f3\'ed\'ea\'f6\'e8\'e8 \'f1\'ee\'e7\'e4\'e0\'ed\'e8\'ff \'ed\'ee\'e2\'ee\'e3\'ee \'f1\'ee\'ea\'e5\'f2\'e0 \'e1\'f3\'e4\'e5\'f2 \'e2\'fb\'e3\'eb\'ff\'e4\'e5\'f2\'fc \'f2\'e0\'ea: Socket(PF_INET, SOCK_STREAM, IPPROTO_TCP). \'cb\'ee\'ea\'e0\'eb\'fc\'ed\'fb\'e9 \'e0\'e4\'f0\'e5\'f1 \'ef\'ee\'f2\'f0\'e5\'e1\'f3\'e5\'f2\'f1\'ff \'f3\'ea\'e0\'e7\'e0\'f2\'fc \'eb\'e8\'f8\'fc \'ef\'f0\'e8 \'f0\'e0\'e1\'ee\'f2\'e5 \'f1 \'ed\'e5\'ea\'ee\'f2\'ee\'f0\'fb\'ec\'e8 \'ef\'f0\'ee\'f2\'ee\'ea\'ee\'eb\'e0\'ec\'e8 \'e2\'fb\'f1\'ee\'ea\'ee\'e3\'ee \'f3\'f0\'ee\'e2\'ed\'ff, \'ed\'e0\'ef\'f0\'e8\'ec\'e5\'f0 \'f1 SMTP (\'ef\'f0\'ee\'f2\'ee\'ea\'ee\'eb \'ef\'e5\'f0\'e5\'e4\'e0\'f7\'e8 \'f1\'ee\'ee\'e1\'f9\'e5\'ed\'e8\'e9).\par
\'c4\'eb\'ff \'f0\'e0\'e1\'ee\'f2\'fb \'f1 FTP \'ed\'e0 C++ \'ec\'ee\'e6\'ed\'ee \'e8\'f1\'ef\'ee\'eb\'fc\'e7\'ee\'e2\'e0\'f2\'fc \'e1\'e8\'e1\'eb\'e8\'ee\'f2\'e5\'ea\'f3 FTP Client Engine for C/C++ (FCE4C). \'ce\'ed\'e0 \'ef\'ee\'e7\'e2\'ee\'eb\'ff\'e5\'f2 \'ef\'ee\'e4\'ea\'eb\'fe\'f7\'e0\'f2\'fc\'f1\'ff \'ea \'eb\'fe\'e1\'ee\'ec\'f3 FTP-\'f1\'e5\'f0\'e2\'e5\'f0\'f3, \'ef\'e5\'f0\'e5\'ec\'e5\'f9\'e0\'f2\'fc\'f1\'ff \'ef\'ee \'e5\'e3\'ee \'f1\'f2\'f0\'f3\'ea\'f2\'f3\'f0\'e5 \'ea\'e0\'f2\'e0\'eb\'ee\'e3\'ee\'e2, \'ef\'e5\'f0\'e5\'f7\'e8\'f1\'eb\'ff\'f2\'fc \'f4\'e0\'e9\'eb\'fb, \'e7\'e0\'e3\'f0\'f3\'e6\'e0\'f2\'fc, \'f3\'e4\'e0\'eb\'ff\'f2\'fc, \'e4\'ee\'e1\'e0\'e2\'eb\'ff\'f2\'fc \'e8 \'e7\'e0\'e3\'f0\'f3\'e6\'e0\'f2\'fc \'f4\'e0\'e9\'eb\'fb \'f1 \'e8\'f1\'ef\'ee\'eb\'fc\'e7\'ee\'e2\'e0\'ed\'e8\'e5\'ec \'ef\'f0\'ee\'f2\'ee\'ea\'ee\'eb\'e0 FTP.\par
\'c2 C# \'e4\'eb\'ff \'f1\'e5\'f2\'e5\'e2\'ee\'e3\'ee \'ef\'f0\'ee\'e3\'f0\'e0\'ec\'ec\'e8\'f0\'ee\'e2\'e0\'ed\'e8\'ff \'f1\'ee\'ea\'e5\'f2\'ee\'e2 \'e8\'f1\'ef\'ee\'eb\'fc\'e7\'f3\'e5\'f2\'f1\'ff \'ea\'eb\'e0\'f1\'f1 Socket \'e8\'e7 \'ef\'f0\'ee\'f1\'f2\'f0\'e0\'ed\'f1\'f2\'e2\'e0 \'e8\'ec\'b8\'ed System.NET.Sockets, \'ea\'ee\'f2\'ee\'f0\'fb\'e9 \'ef\'f0\'e5\'e4\'ee\'f1\'f2\'e0\'e2\'eb\'ff\'e5\'f2 \'ed\'e8\'e7\'ea\'ee\'f3\'f0\'ee\'e2\'ed\'e5\'e2\'fb\'e9 \'e8\'ed\'f2\'e5\'f0\'f4\'e5\'e9\'f1 \'e4\'eb\'ff \'ef\'f0\'e8\'b8\'ec\'e0 \'e8 \'ee\'f2\'ef\'f0\'e0\'e2\'ea\'e8 \'f1\'ee\'ee\'e1\'f9\'e5\'ed\'e8\'e9 \'ef\'ee \'f1\'e5\'f2\'e8.\par
\par
\b\'d1\'e5\'f2\'e5\'e2\'ee\'e5 \'ef\'f0\'ee\'e3\'f0\'e0\'ec\'ec\'e8\'f0\'ee\'e2\'e0\'ed\'e8\'e5 \'f1 \'e8\'f1\'ef\'ee\'eb\'fc\'e7\'ee\'e2\'e0\'ed\'e8\'e5\'ec \'f1\'ee\'ea\'e5\'f2\'ee\'e2 \'e8 \'ef\'f0\'ee\'f2\'ee\'ea\'ee\'eb\'ee\'e2 SMTP \b0 (Simple Mail Transfer Protocol) \'e8 FTP (File Transfer Protocol) \'ef\'ee\'e7\'e2\'ee\'eb\'ff\'e5\'f2 \'f1\'ee\'e7\'e4\'e0\'e2\'e0\'f2\'fc \'ef\'f0\'e8\'eb\'ee\'e6\'e5\'ed\'e8\'ff \'e4\'eb\'ff \'ee\'f2\'ef\'f0\'e0\'e2\'ea\'e8 \'fd\'eb\'e5\'ea\'f2\'f0\'ee\'ed\'ed\'ee\'e9 \'ef\'ee\'f7\'f2\'fb \'e8 \'ef\'e5\'f0\'e5\'e4\'e0\'f7\'e8 \'f4\'e0\'e9\'eb\'ee\'e2. \'d0\'e0\'f1\'f1\'ec\'ee\'f2\'f0\'e8\'ec, \'ea\'e0\'ea \'f0\'e0\'e1\'ee\'f2\'e0\'f2\'fc \'f1 \'fd\'f2\'e8\'ec\'e8 \'ef\'f0\'ee\'f2\'ee\'ea\'ee\'eb\'e0\'ec\'e8 \'e2 C# \'e8 C++.\par
\'cf\'ee\'ed\'ff\'f2\'e8\'e5 \'ef\'f0\'ee\'f2\'ee\'ea\'ee\'eb\'ee\'e2 SMTP \'e8 FTP\par
\b SMTP \b0 (Simple Mail Transfer Protocol): \'cf\'f0\'ee\'f2\'ee\'ea\'ee\'eb \'ef\'f0\'e8\'ea\'eb\'e0\'e4\'ed\'ee\'e3\'ee \'f3\'f0\'ee\'e2\'ed\'ff \'e4\'eb\'ff \'ee\'f2\'ef\'f0\'e0\'e2\'ea\'e8 \'fd\'eb\'e5\'ea\'f2\'f0\'ee\'ed\'ed\'ee\'e9 \'ef\'ee\'f7\'f2\'fb. \'ca\'eb\'e8\'e5\'ed\'f2 (\'ed\'e0\'ef\'f0\'e8\'ec\'e5\'f0, \'ef\'ee\'f7\'f2\'ee\'e2\'fb\'e9 \'ea\'eb\'e8\'e5\'ed\'f2) \'ee\'f2\'ef\'f0\'e0\'e2\'eb\'ff\'e5\'f2 \'fd\'eb\'e5\'ea\'f2\'f0\'ee\'ed\'ed\'ee\'e5 \'ef\'e8\'f1\'fc\'ec\'ee SMTP-\'f1\'e5\'f0\'e2\'e5\'f0\'f3, \'ea\'ee\'f2\'ee\'f0\'fb\'e9 \'ef\'e5\'f0\'e5\'f1\'fb\'eb\'e0\'e5\'f2 \'e5\'e3\'ee \'e4\'f0\'f3\'e3\'e8\'ec SMTP-\'f1\'e5\'f0\'e2\'e5\'f0\'e0\'ec, \'ef\'ee\'ea\'e0 \'ef\'e8\'f1\'fc\'ec\'ee \'ed\'e5 \'e4\'ee\'f1\'f2\'e8\'e3\'ed\'e5\'f2 \'ef\'ee\'eb\'f3\'f7\'e0\'f2\'e5\'eb\'ff. SMTP \'ee\'e1\'fb\'f7\'ed\'ee \'e8\'f1\'ef\'ee\'eb\'fc\'e7\'f3\'e5\'f2 \'ef\'ee\'f0\'f2 25 (\'e8 \'e4\'f0\'f3\'e3\'e8\'e5, \'ed\'e0\'ef\'f0\'e8\'ec\'e5\'f0, 587 \'e4\'eb\'ff Submission).\par
\b FTP \b0 (File Transfer Protocol): \'cf\'f0\'ee\'f2\'ee\'ea\'ee\'eb \'ef\'f0\'e8\'ea\'eb\'e0\'e4\'ed\'ee\'e3\'ee \'f3\'f0\'ee\'e2\'ed\'ff \'e4\'eb\'ff \'ef\'e5\'f0\'e5\'e4\'e0\'f7\'e8 \'f4\'e0\'e9\'eb\'ee\'e2 \'ec\'e5\'e6\'e4\'f3 \'ea\'eb\'e8\'e5\'ed\'f2\'ee\'ec \'e8 \'f1\'e5\'f0\'e2\'e5\'f0\'ee\'ec. FTP \'e8\'f1\'ef\'ee\'eb\'fc\'e7\'f3\'e5\'f2 \'e4\'e2\'e0 TCP-\'f1\'ee\'e5\'e4\'e8\'ed\'e5\'ed\'e8\'ff: \'ee\'e4\'ed\'ee \'e4\'eb\'ff \'ea\'ee\'ec\'e0\'ed\'e4 (\'ee\'e1\'fb\'f7\'ed\'ee \'ef\'ee\'f0\'f2 21) \'e8 \'e4\'f0\'f3\'e3\'ee\'e5 \'e4\'eb\'ff \'ef\'e5\'f0\'e5\'e4\'e0\'f7\'e8 \'e4\'e0\'ed\'ed\'fb\'f5 (\'ee\'e1\'fb\'f7\'ed\'ee \'ef\'ee\'f0\'f2 20 \'e4\'eb\'ff \'e0\'ea\'f2\'e8\'e2\'ed\'ee\'e3\'ee \'f0\'e5\'e6\'e8\'ec\'e0, \'e4\'eb\'ff \'ef\'e0\'f1\'f1\'e8\'e2\'ed\'ee\'e3\'ee \'e8\'f1\'ef\'ee\'eb\'fc\'e7\'f3\'fe\'f2\'f1\'ff \'f1\'eb\'f3\'f7\'e0\'e9\'ed\'fb\'e5 \'ef\'ee\'f0\'f2\'fb).\par
\b\'d0\'e0\'e1\'ee\'f2\'e0 \'f1 SMTP \'e2 C#\b0\par
C# \'ef\'f0\'e5\'e4\'ee\'f1\'f2\'e0\'e2\'eb\'ff\'e5\'f2 \'f3\'e4\'ee\'e1\'ed\'fb\'e5 \'ea\'eb\'e0\'f1\'f1\'fb \'e4\'eb\'ff \'f0\'e0\'e1\'ee\'f2\'fb \'f1 SMTP \'e2 \'ef\'f0\'ee\'f1\'f2\'f0\'e0\'ed\'f1\'f2\'e2\'e5 \'e8\'ec\'e5\'ed System.Net.Mail.\par
\'cf\'f0\'e8\'ec\'e5\'f0 \'ee\'f2\'ef\'f0\'e0\'e2\'ea\'e8 \'ef\'e8\'f1\'fc\'ec\'e0 \'f7\'e5\'f0\'e5\'e7 SMTP:\par
using System;\par
using System.Net;\par
using System.Net.Mail;\par
using System.Threading.Tasks;\par
public class SmtpClientExample\par
\{\par
    public static async Task Main(string[] args)\par
    \{\par
        string smtpServer = "smtp.example.com"; // \'c7\'e0\'ec\'e5\'ed\'e8\'f2\'e5 \'ed\'e0 \'e0\'e4\'f0\'e5\'f1 \'e2\'e0\'f8\'e5\'e3\'ee SMTP-\'f1\'e5\'f0\'e2\'e5\'f0\'e0\par
        int smtpPort = 587; // \'cf\'ee\'f0\'f2 SMTP (\'ec\'ee\'e6\'e5\'f2 \'e1\'fb\'f2\'fc 25 \'e8\'eb\'e8 465)\par
        string smtpUser = "your_email@example.com"; // \'c7\'e0\'ec\'e5\'ed\'e8\'f2\'e5 \'ed\'e0 \'e2\'e0\'f8 email\par
        string smtpPassword = "your_password"; // \'c7\'e0\'ec\'e5\'ed\'e8\'f2\'e5 \'ed\'e0 \'e2\'e0\'f8 \'ef\'e0\'f0\'ee\'eb\'fc\par
        string senderEmail = "your_email@example.com";\par
        string recipientEmail = "recipient@example.com"; // \'c7\'e0\'ec\'e5\'ed\'e8\'f2\'e5 \'ed\'e0 email \'ef\'ee\'eb\'f3\'f7\'e0\'f2\'e5\'eb\'ff\par
        string subject = "Test Email from C#";\par
        string body = "This is a test email sent from C# using SMTP.";\par
        using (SmtpClient smtp = new SmtpClient(smtpServer, smtpPort))\par
        \{\par
            smtp.EnableSsl = true; // \'c2\'ea\'eb\'fe\'f7\'e8\'f2\'fc SSL/TLS\par
            smtp.Credentials = new NetworkCredential(smtpUser, smtpPassword);\par
\par
            using (MailMessage mail = new MailMessage(senderEmail, recipientEmail, subject, body))\par
            \{\par
                try\par
                \{\par
                  await smtp.SendMailAsync(mail);\par
                    Console.WriteLine("Email sent successfully.");\par
                \}\par
                catch (Exception ex)\par
                \{\par
                  Console.WriteLine($"Failed to send email: \{ex.Message\}");\par
                  if(ex.InnerException!=null)\par
                    Console.WriteLine($"Inner exception: \{ex.InnerException.Message\}");\par
                \}\par
            \}\par
        \}\par
        Console.ReadKey();\par
    \}\par
\}\par
\b\'d0\'e0\'e1\'ee\'f2\'e0 \'f1 FTP \'e2 C#\b0\par
\'c4\'eb\'ff \'f0\'e0\'e1\'ee\'f2\'fb \'f1 FTP \'e2 C# \'ec\'ee\'e6\'ed\'ee \'e8\'f1\'ef\'ee\'eb\'fc\'e7\'ee\'e2\'e0\'f2\'fc \'ea\'eb\'e0\'f1\'f1 FtpWebRequest.\par
\'cf\'f0\'e8\'ec\'e5\'f0 \'e7\'e0\'e3\'f0\'f3\'e7\'ea\'e8 \'f4\'e0\'e9\'eb\'e0 \'ed\'e0 FTP-\'f1\'e5\'f0\'e2\'e5\'f0:\par
using System;\par
using System.IO;\par
using System.Net;\par
using System.Threading.Tasks;\par
public class FtpClientExample\par
\{\par
    public static async Task Main(string[] args)\par
    \{\par
        string ftpServer = "{{\field{\*\fldinst{HYPERLINK ftp://ftp.example.com/path/to/upload/ }}{\fldrslt{ftp://ftp.example.com/path/to/upload/\ul0\cf0}}}}\f0\fs22 "; // \'c7\'e0\'ec\'e5\'ed\'e8\'f2\'e5 \'ed\'e0 \'e2\'e0\'f8 FTP-\'f1\'e5\'f0\'e2\'e5\'f0\par
        string ftpUser = "your_ftp_user"; // \'c7\'e0\'ec\'e5\'ed\'e8\'f2\'e5 \'ed\'e0 \'e2\'e0\'f8\'e5\'e3\'ee FTP-\'ef\'ee\'eb\'fc\'e7\'ee\'e2\'e0\'f2\'e5\'eb\'ff\par
        string ftpPassword = "your_ftp_password"; // \'c7\'e0\'ec\'e5\'ed\'e8\'f2\'e5 \'ed\'e0 \'e2\'e0\'f8 FTP-\'ef\'e0\'f0\'ee\'eb\'fc\par
        string sourceFilePath = "test.txt"; // \'c8\'ec\'ff \'f4\'e0\'e9\'eb\'e0 \'e4\'eb\'ff \'e7\'e0\'e3\'f0\'f3\'e7\'ea\'e8\par
        string targetFile = "uploaded_test.txt"; // \'c8\'ec\'ff \'f4\'e0\'e9\'eb\'e0 \'ed\'e0 \'f1\'e5\'f0\'e2\'e5\'f0\'e5\par
        var fullUri = new Uri(ftpServer + targetFile);\par
        Console.WriteLine(fullUri.ToString());\par
        FtpWebRequest request = (FtpWebRequest)WebRequest.Create(fullUri);\par
        request.Method = WebRequestMethods.{{\field{\*\fldinst{HYPERLINK Ftp.UploadFile }}{\fldrslt{Ftp.UploadFile\ul0\cf0}}}}\f0\fs22 ;\par
        request.Credentials = new NetworkCredential(ftpUser, ftpPassword);\par
        request.UsePassive = true;\par
        try\par
        \{\par
            using (Stream fileStream = File.OpenRead(sourceFilePath))\par
            \{\par
                using (Stream requestStream = await request.GetRequestStreamAsync())\par
                \{\par
                    await fileStream.CopyToAsync(requestStream);\par
                \}\par
\par
                using (FtpWebResponse response = (FtpWebResponse)await request.GetResponseAsync())\par
                \{\par
                    Console.WriteLine($"Upload successful. Status code: \{response.StatusCode\}");\par
                    response.Close();\par
                \}\par
            \}\par
        \}\par
        catch (Exception ex)\par
        \{\par
            Console.WriteLine($"FTP upload failed: \{ex.Message\}");\par
        \}\par
          Console.ReadKey();\par
    \}\par
\}\par
\b\'d0\'e0\'e1\'ee\'f2\'e0 \'f1 SMTP \'e2 C++\b0\par
\'c4\'eb\'ff \'f0\'e0\'e1\'ee\'f2\'fb \'f1 SMTP \'e2 C++ \'ec\'ee\'e6\'ed\'ee \'e8\'f1\'ef\'ee\'eb\'fc\'e7\'ee\'e2\'e0\'f2\'fc \'f1\'f2\'ee\'f0\'ee\'ed\'ed\'e8\'e5 \'e1\'e8\'e1\'eb\'e8\'ee\'f2\'e5\'ea\'e8, \'ed\'e0\'ef\'f0\'e8\'ec\'e5\'f0, libcurl \'e8\'eb\'e8 \ldblquote\'f7\'e8\'f1\'f2\'fb\'e5\rdblquote  \'f1\'ee\'ea\'e5\'f2\'fb. \'c8\'f1\'ef\'ee\'eb\'fc\'e7\'ee\'e2\'e0\'ed\'e8\'e5 \'e1\'e8\'e1\'eb\'e8\'ee\'f2\'e5\'ea \'ef\'f0\'ee\'f9\'e5, \'f2\'e0\'ea \'ea\'e0\'ea \'ee\'ed\'e8 \'ee\'e1\'f0\'e0\'e1\'e0\'f2\'fb\'e2\'e0\'fe\'f2 \'ed\'e8\'e7\'ea\'ee\'f3\'f0\'ee\'e2\'ed\'e5\'e2\'f3\'fe \'f0\'e0\'e1\'ee\'f2\'f3 \'f1 \'f1\'ee\'ea\'e5\'f2\'e0\'ec\'e8.\par
\'cf\'f0\'e8\'ec\'e5\'f0 \'ee\'f2\'ef\'f0\'e0\'e2\'ea\'e8 \'ef\'e8\'f1\'fc\'ec\'e0 \'f1 \'e8\'f1\'ef\'ee\'eb\'fc\'e7\'ee\'e2\'e0\'ed\'e8\'e5\'ec libcurl:\par
#include <iostream>\par
#include <curl/curl.h>\par
#include <string>\par
#include <vector>\par
// \'d1\'f2\'f0\'f3\'ea\'f2\'f3\'f0\'e0 \'e4\'eb\'ff \'ef\'f0\'e5\'e4\'f1\'f2\'e0\'e2\'eb\'e5\'ed\'e8\'ff \'ef\'ee\'f7\'f2\'ee\'e2\'ee\'e3\'ee \'e0\'e4\'f0\'e5\'f1\'e0\par
struct MailAddress\par
\{\par
    std::string name;\par
    std::string email;\par
    MailAddress(std::string name, std::string email) : name(name), email(email) \{\}\par
\};\par
// Callback \'e4\'eb\'ff \'f7\'f2\'e5\'ed\'e8\'ff \'e4\'e0\'ed\'ed\'fb\'f5 \'e8\'e7 \'f1\'ee\'ee\'e1\'f9\'e5\'ed\'e8\'ff\par
size_t read_callback(char *buffer, size_t size, size_t nitems, void *userdata)\par
\{\par
    const std::string *message_ptr = static_cast<const std::string *>(userdata);\par
    const std::string &message = *message_ptr;\par
    static int currentPos = 0; // \'cf\'ee\'e7\'e8\'f6\'e8\'ff \'f7\'f2\'e5\'ed\'e8\'ff\par
    size_t maxLength = size * nitems;\par
    size_t bytesLeft = message.length() - currentPos;\par
    if (bytesLeft <= 0) return 0;\par
    size_t bytesToCopy = std::min((size_t)bytesLeft, maxLength);\par
    memcpy(buffer, message.c_str() + currentPos, bytesToCopy);\par
    currentPos += bytesToCopy;\par
    return bytesToCopy;\par
\}\par
int main()\par
\{\par
    CURL *curl;\par
    CURLcode res = CURLE_OK;\par
    curl_global_init(CURL_GLOBAL_ALL);\par
    curl = curl_easy_init();\par
    if (curl)\par
    \{\par
        std::string smtpServer = "smtp.example.com:587"; // SMTP-\'f1\'e5\'f0\'e2\'e5\'f0\par
        std::string smtpUser = "your_email@example.com"; // SMTP-\'ef\'ee\'eb\'fc\'e7\'ee\'e2\'e0\'f2\'e5\'eb\'fc\par
        std::string smtpPassword = "your_password"; // SMTP-\'ef\'e0\'f0\'ee\'eb\'fc\par
        MailAddress sender("Sender Name", "your_email@example.com");\par
        MailAddress recipient("Recipient Name", "recipient@example.com"); // \'cf\'ee\'eb\'f3\'f7\'e0\'f2\'e5\'eb\'fc\par
        // \'c0\'e4\'f0\'e5\'f1 \'ee\'f2\'ef\'f0\'e0\'e2\'ea\'e8\par
        curl_easy_setopt(curl, CURLOPT_MAIL_FROM, sender.email.c_str());\par
         curl_easy_setopt(curl, CURLOPT_USERNAME, smtpUser.c_str());\par
        curl_easy_setopt(curl, CURLOPT_PASSWORD, smtpPassword.c_str());\par
        //\'c0\'e4\'f0\'e5\'f1\'e0 \'ef\'ee\'eb\'f3\'f7\'e0\'f2\'e5\'eb\'e5\'e9\par
        struct curl_slist *recipients = NULL;\par
        recipients = curl_slist_append(recipients, recipient.email.c_str());\par
        curl_easy_setopt(curl, CURLOPT_MAIL_RCPT, recipients);\par
        // \'d2\'e5\'ea\'f1\'f2 \'f1\'ee\'ee\'e1\'f9\'e5\'ed\'e8\'ff\par
        std::string message = "Date: Fri, 28 Aug 2024 12:00:00 +0100\\r\\n"\par
        "To: " + recipient.name + "<" + recipient.email + ">\\r\\n"\par
        "From: " + sender.name + "<" + sender.email + ">\\r\\n"\par
        "Subject: Test Email from C++\\r\\n"\par
        "\\r\\n"\par
        "This is a test email from C++ using SMTP with libcurl.\\r\\n";\par
        curl_easy_setopt(curl, CURLOPT_READFUNCTION, read_callback);\par
        curl_easy_setopt(curl, CURLOPT_READDATA, &message);\par
        curl_easy_setopt(curl, CURLOPT_UPLOAD, 1L);\par
        curl_easy_setopt(curl, CURLOPT_INFILESIZE, (long)message.length());\par
        curl_easy_setopt(curl, CURLOPT_URL, smtpServer.c_str());\par
       res = curl_easy_perform(curl);\par
       if(res != CURLE_OK)\par
           fprintf(stderr, "curl_easy_perform() failed: %s\\n",\par
                   curl_easy_strerror(res));\par
       else\par
           fprintf(stdout, "Mail sent succesfully!\\n");\par
        curl_easy_cleanup(curl);\par
        curl_slist_free_all(recipients);\par
    \}\par
    curl_global_cleanup();\par
    return 0;\par
\}\par
\b\'d0\'e0\'e1\'ee\'f2\'e0 \'f1 FTP \'e2 C++\b0\par
\'c4\'eb\'ff \'f0\'e0\'e1\'ee\'f2\'fb \'f1 FTP \'e2 C++ \'ec\'ee\'e6\'ed\'ee \'e8\'f1\'ef\'ee\'eb\'fc\'e7\'ee\'e2\'e0\'f2\'fc \'e1\'e8\'e1\'eb\'e8\'ee\'f2\'e5\'ea\'f3 libcurl.\par
\'cf\'f0\'e8\'ec\'e5\'f0 \'e7\'e0\'e3\'f0\'f3\'e7\'ea\'e8 \'f4\'e0\'e9\'eb\'e0 \'ed\'e0 FTP-\'f1\'e5\'f0\'e2\'e5\'f0 (\'f1 \'e8\'f1\'ef\'ee\'eb\'fc\'e7\'ee\'e2\'e0\'ed\'e8\'e5\'ec libcurl):\par
#include <iostream>\par
#include <curl/curl.h>\par
#include <fstream>\par
#include <string>\par
size_t read_callback(char *buffer, size_t size, size_t nitems, void *userdata)\par
\{\par
    std::ifstream *file = static_cast<std::ifstream*>(userdata);\par
    size_t read_size = size * nitems;\par
    file->read(buffer, read_size);\par
    return file->gcount();\par
\}\par
int main() \{\par
    CURL *curl;\par
    CURLcode res;\par
    curl_global_init(CURL_GLOBAL_ALL);\par
    curl = curl_easy_init();\par
    if(curl)\par
    \{\par
        std::string ftpServer = "{{\field{\*\fldinst{HYPERLINK ftp://ftp.example.com/path/to/upload/uploaded_test.txt }}{\fldrslt{ftp://ftp.example.com/path/to/upload/uploaded_test.txt\ul0\cf0}}}}\f0\fs22 "; // FTP-\'f1\'e5\'f0\'e2\'e5\'f0\par
        std::string ftpUser = "your_ftp_user"; // FTP-\'ef\'ee\'eb\'fc\'e7\'ee\'e2\'e0\'f2\'e5\'eb\'fc\par
        std::string ftpPassword = "your_ftp_password"; // FTP-\'ef\'e0\'f0\'ee\'eb\'fc\par
        std::string sourceFilePath = "test.txt"; // \'cf\'f3\'f2\'fc \'ea \'eb\'ee\'ea\'e0\'eb\'fc\'ed\'ee\'ec\'f3 \'f4\'e0\'e9\'eb\'f3\par
        std::ifstream file(sourceFilePath, std::ios::binary);\par
        if(!file.is_open())\par
        \{\par
           std::cerr<<"Unable to open file"<<std::endl;\par
           return 1;\par
        \}\par
        curl_easy_setopt(curl, CURLOPT_URL, ftpServer.c_str());\par
        curl_easy_setopt(curl, CURLOPT_UPLOAD, 1L);\par
        curl_easy_setopt(curl, CURLOPT_USERNAME, ftpUser.c_str());\par
        curl_easy_setopt(curl, CURLOPT_PASSWORD, ftpPassword.c_str());\par
        curl_easy_setopt(curl, CURLOPT_READFUNCTION, read_callback);\par
        curl_easy_setopt(curl, CURLOPT_READDATA, &file);\par
        file.seekg(0, std::ios::end);\par
        long fileSize = file.tellg();\par
        file.seekg(0, std::ios::beg);\par
        curl_easy_setopt(curl, CURLOPT_INFILESIZE, fileSize);\par
        res = curl_easy_perform(curl);\par
        if(res != CURLE_OK)\par
            std::cerr << "curl_easy_perform() failed: " << curl_easy_strerror(res) << std::endl;\par
        else\par
            std::cout << "FTP upload successful" << std::endl;\par
        curl_easy_cleanup(curl);\par
    \}\par
    curl_global_cleanup();\par
    return 0;\par
\}\par
}
 