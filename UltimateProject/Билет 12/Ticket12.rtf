{\rtf1\ansi\ansicpg1251\deff0\nouicompat{\fonttbl{\f0\fnil\fcharset204 Calibri;}{\f1\fnil Calibri;}{\f2\fnil\fcharset0 Calibri;}}
{\colortbl ;\red255\green255\blue0;\red0\green0\blue255;}
{\*\generator Riched20 10.0.19041}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\highlight1\b\i\f0\fs22\lang1049\'d1\'e5\'f2\'e5\'e2\'ee\'e5 \'ef\'f0\'ee\'e3\'f0\'e0\'ec\'ec\'e8\'f0\'ee\'e2\'e0\'ed\'e8\'e5 \'f1\'ee\'ea\'e5\'f2\'ee\'e2: \'ef\'ee\'ed\'ff\'f2\'e8\'e5, \'f0\'e0\'e1\'ee\'f2\'e0 \'f1 \'ef\'f0\'ee\'f2\'ee\'ea\'ee\'eb\'ee\'ec HTTP.\highlight0\par
\'d0\'e0\'e7\'f0\'e0\'e1\'ee\'f2\'e0\'f2\'fc \'f4\'f3\'ed\'ea\'f6\'e8\'fe DeleteSpace(S), \'f3\'e4\'e0\'eb\'ff\'fe\'f9\'f3\'fe \'e2 \'f1\'f2\'f0\'ee\'ea\'e5 S \'eb\'e8\'f8\'ed\'e8\'e5 \'ef\'f0\'ee\'e1\'e5\'eb\'fb. \'c2 \'ee\'f1\'ed\'ee\'e2\'ed\'ee\'e9 \'ef\'f0\'ee\'e3\'f0\'e0\'ec\'ec\'e5 \'ef\'f0\'e8\'ec\'e5\'ed\'e8\'f2\'fc \'f4\'f3\'ed\'ea\'f6\'e8\'fe \'e4\'e2\'f3\'ec \'e8\'f1\'f5\'ee\'e4\'ed\'fb\'ec \'f2\'e5\'ea\'f1\'f2\'ee\'e2\'fb\'ec \'f4\'e0\'e9\'eb\'e0\'ec, \'f1\'ef\'e8\'f1\'ee\'ea \'ea\'ee\'f2\'ee\'f0\'fb\'f5 \'e7\'e0\'e4\'e0\'e5\'f2 \'ef\'ee\'eb\'fc\'e7\'ee\'e2\'e0\'f2\'e5\'eb\'fc. \'c2\'fb\'e2\'ee\'e4 \'e8\'f1\'ef\'f0\'e0\'e2\'eb\'e5\'ed\'ed\'ee\'e3\'ee \'f2\'e5\'ea\'f1\'f2\'e0 \'ee\'f1\'f3\'f9\'e5\'f1\'f2\'e2\'e8\'f2\'fc \'e2 \'f4\'e0\'e9\'eb\'fb \'f1 \'ef\'f0\'e5\'f4\'e8\'ea\'f1\'ee\'ec check.\par
\par
\i0\'d1\'e5\'f2\'e5\'e2\'ee\'e5 \'ef\'f0\'ee\'e3\'f0\'e0\'ec\'ec\'e8\'f0\'ee\'e2\'e0\'ed\'e8\'e5 \'f1\'ee\'ea\'e5\'f2\'ee\'e2 \b0\f1\emdash  \f0\'fd\'f2\'ee \'f0\'e0\'e1\'ee\'f2\'e0 \'f1 \'f1\'e5\'f2\'fc\'fe \'ed\'e0 \'ed\'e8\'e7\'ea\'ee\'ec \'f3\'f0\'ee\'e2\'ed\'e5 \'f1 \'e8\'f1\'ef\'ee\'eb\'fc\'e7\'ee\'e2\'e0\'ed\'e8\'e5\'ec \'f1\'ee\'ea\'e5\'f2\'ee\'e2, \'ea\'ee\'f2\'ee\'f0\'fb\'e5 \'ef\'f0\'e5\'e4\'ee\'f1\'f2\'e0\'e2\'eb\'ff\'fe\'f2 \'e8\'ed\'f2\'e5\'f0\'f4\'e5\'e9\'f1 \'e4\'ee\'f1\'f2\'f3\'ef\'e0 \'ea \'ee\'ef\'f0\'e5\'e4\'e5\'eb\'b8\'ed\'ed\'ee\'ec\'f3 \'ef\'ee\'f0\'f2\'f3 \'ee\'ef\'f0\'e5\'e4\'e5\'eb\'b8\'ed\'ed\'ee\'e3\'ee \'f5\'ee\'f1\'f2\'e0. \'d7\'e5\'f0\'e5\'e7 \'f1\'ee\'ea\'e5\'f2 \'ee\'e4\'e8\'ed \'f5\'ee\'f1\'f2 \'ec\'ee\'e6\'e5\'f2 \'ee\'e1\'f0\'e0\'f9\'e0\'f2\'fc\'f1\'ff \'ea \'ef\'f0\'e8\'eb\'ee\'e6\'e5\'ed\'e8\'fe \'ed\'e0 \'e4\'f0\'f3\'e3\'ee\'ec \'f5\'ee\'f1\'f2\'e5.\par
\'d0\'e0\'e1\'ee\'f2\'e0 \'f1 \'ef\'f0\'ee\'f2\'ee\'ea\'ee\'eb\'ee\'ec HTTP \'e2 \'ea\'ee\'ed\'f2\'e5\'ea\'f1\'f2\'e5 \'f1\'e5\'f2\'e5\'e2\'ee\'e3\'ee \'ef\'f0\'ee\'e3\'f0\'e0\'ec\'ec\'e8\'f0\'ee\'e2\'e0\'ed\'e8\'ff \'f1\'ee\'ea\'e5\'f2\'ee\'e2 \'ef\'f0\'e5\'e4\'ef\'ee\'eb\'e0\'e3\'e0\'e5\'f2 \'f0\'e5\'e0\'eb\'e8\'e7\'e0\'f6\'e8\'fe \'ef\'ee\'e4\'e4\'e5\'f0\'e6\'ea\'e8 \'f0\'e0\'e1\'ee\'f2\'fb \'f1 \'e7\'e0\'e3\'ee\'eb\'ee\'e2\'ea\'e0\'ec\'e8 \'e7\'e0\'ef\'f0\'ee\'f1\'e0 \'e8 \'ee\'f2\'e2\'e5\'f2\'e0, \'ef\'ee\'eb\'f3\'f7\'e5\'ed\'e8\'e5 \'ec\'e5\'f2\'ee\'e4\'e0 \'e7\'e0\'ef\'f0\'ee\'f1\'e0, \'e2\'e5\'f0\'f1\'e8\'e8 \'ef\'f0\'ee\'f2\'ee\'ea\'ee\'eb\'e0 \'e8 URL-\'e0\'e4\'f0\'e5\'f1\'e0. \'cd\'e0\'ef\'f0\'e8\'ec\'e5\'f0, \'f1\'e5\'f0\'e2\'e5\'f0 \'ec\'ee\'e6\'e5\'f2 \'ef\'f0\'e8\'ed\'e8\'ec\'e0\'f2\'fc \'e7\'e0\'ef\'f0\'ee\'f1\'fb \'ea\'eb\'e8\'e5\'ed\'f2\'ee\'e2, \'ef\'e0\'f0\'f1\'e8\'f2\'fc \'e7\'e0\'e3\'ee\'eb\'ee\'e2\'ea\'e8 \'e8 \'f2\'e5\'eb\'ee \'e7\'e0\'ef\'f0\'ee\'f1\'e0 \'e8 \'e2\'ee\'e7\'e2\'f0\'e0\'f9\'e0\'f2\'fc \'f2\'e5\'f1\'f2\'ee\'e2\'f3\'fe HTML-\'f1\'f2\'f0\'e0\'ed\'e8\'f7\'ea\'f3, \'ed\'e0 \'ea\'ee\'f2\'ee\'f0\'ee\'e9 \'ee\'f2\'ee\'e1\'f0\'e0\'e6\'e5\'ed\'fb \'e4\'e0\'ed\'ed\'fb\'e5 \'e7\'e0\'ef\'f0\'ee\'f1\'e0 \'ea\'eb\'e8\'e5\'ed\'f2\'e0 (\'e7\'e0\'ef\'f0\'ee\'f8\'e5\'ed\'ed\'fb\'e9 URL, \'ec\'e5\'f2\'ee\'e4 \'e7\'e0\'ef\'f0\'ee\'f1\'e0, cookie \'e8 \'e4\'f0\'f3\'e3\'e8\'e5 \'e7\'e0\'e3\'ee\'eb\'ee\'e2\'ea\'e8).\par
\'c2 .NET \'f1\'ee\'ea\'e5\'f2\'fb \'ef\'f0\'e5\'e4\'f1\'f2\'e0\'e2\'eb\'e5\'ed\'fb \'ea\'eb\'e0\'f1\'f1\'ee\'ec Socket \'e8\'e7 \'ef\'f0\'ee\'f1\'f2\'f0\'e0\'ed\'f1\'f2\'e2\'e0 \'e8\'ec\'b8\'ed System.NET.Sockets, \'ea\'ee\'f2\'ee\'f0\'fb\'e9 \'ef\'f0\'e5\'e4\'ee\'f1\'f2\'e0\'e2\'eb\'ff\'e5\'f2 \'ed\'e8\'e7\'ea\'ee\'f3\'f0\'ee\'e2\'ed\'e5\'e2\'fb\'e9 \'e8\'ed\'f2\'e5\'f0\'f4\'e5\'e9\'f1 \'e4\'eb\'ff \'ef\'f0\'e8\'b8\'ec\'e0 \'e8 \'ee\'f2\'ef\'f0\'e0\'e2\'ea\'e8 \'f1\'ee\'ee\'e1\'f9\'e5\'ed\'e8\'e9 \'ef\'ee \'f1\'e5\'f2\'e8. \par
\par
\b\'d1\'e5\'f2\'e5\'e2\'ee\'e5 \'ef\'f0\'ee\'e3\'f0\'e0\'ec\'ec\'e8\'f0\'ee\'e2\'e0\'ed\'e8\'e5 \'f1 \'e8\'f1\'ef\'ee\'eb\'fc\'e7\'ee\'e2\'e0\'ed\'e8\'e5\'ec \'f1\'ee\'ea\'e5\'f2\'ee\'e2 \'e8 \'ef\'f0\'ee\'f2\'ee\'ea\'ee\'eb\'e0 HTTP \b0\f1\emdash  \f0\'fd\'f2\'ee \'e2\'e0\'e6\'ed\'e0\'ff \'ee\'e1\'eb\'e0\'f1\'f2\'fc \'f0\'e0\'e7\'f0\'e0\'e1\'ee\'f2\'ea\'e8, \'ef\'ee\'e7\'e2\'ee\'eb\'ff\'fe\'f9\'e0\'ff \'f1\'ee\'e7\'e4\'e0\'e2\'e0\'f2\'fc \'e2\'e5\'e1-\'ea\'eb\'e8\'e5\'ed\'f2\'fb \'e8 \'f1\'e5\'f0\'e2\'e5\'f0\'fb. HTTP (Hypertext Transfer Protocol) \f1\emdash  \f0\'fd\'f2\'ee \'ef\'f0\'ee\'f2\'ee\'ea\'ee\'eb \'ef\'f0\'e8\'ea\'eb\'e0\'e4\'ed\'ee\'e3\'ee \'f3\'f0\'ee\'e2\'ed\'ff, \'f0\'e0\'e1\'ee\'f2\'e0\'fe\'f9\'e8\'e9 \'ef\'ee\'e2\'e5\'f0\'f5 TCP \'e8 \'ef\'f0\'e5\'e4\'ed\'e0\'e7\'ed\'e0\'f7\'e5\'ed\'ed\'fb\'e9 \'e4\'eb\'ff \'ef\'e5\'f0\'e5\'e4\'e0\'f7\'e8 \'e3\'e8\'ef\'e5\'f0\'f2\'e5\'ea\'f1\'f2\'e0 (HTML), \'e8\'e7\'ee\'e1\'f0\'e0\'e6\'e5\'ed\'e8\'e9, \'e2\'e8\'e4\'e5\'ee \'e8 \'e4\'f0\'f3\'e3\'e8\'f5 \'f0\'e5\'f1\'f3\'f0\'f1\'ee\'e2.\par
\b\'cf\'ee\'ed\'ff\'f2\'e8\'e5 HTTP \'e8 \'e5\'e3\'ee \'f0\'e0\'e1\'ee\'f2\'e0 \'f1 \'f1\'ee\'ea\'e5\'f2\'e0\'ec\'e8\b0\par
HTTP \'e8\'f1\'ef\'ee\'eb\'fc\'e7\'f3\'e5\'f2 \'f1\'ee\'ea\'e5\'f2\'fb TCP \'e4\'eb\'ff \'f3\'f1\'f2\'e0\'ed\'ee\'e2\'eb\'e5\'ed\'e8\'ff \'f1\'ee\'e5\'e4\'e8\'ed\'e5\'ed\'e8\'ff \'ec\'e5\'e6\'e4\'f3 \'ea\'eb\'e8\'e5\'ed\'f2\'ee\'ec (\'ed\'e0\'ef\'f0\'e8\'ec\'e5\'f0, \'e2\'e5\'e1-\'e1\'f0\'e0\'f3\'e7\'e5\'f0\'ee\'ec) \'e8 \'f1\'e5\'f0\'e2\'e5\'f0\'ee\'ec (\'ed\'e0\'ef\'f0\'e8\'ec\'e5\'f0, \'e2\'e5\'e1-\'f1\'e5\'f0\'e2\'e5\'f0\'ee\'ec). \'ca\'eb\'e8\'e5\'ed\'f2 \'ee\'f2\'ef\'f0\'e0\'e2\'eb\'ff\'e5\'f2 HTTP-\'e7\'e0\'ef\'f0\'ee\'f1 \'ed\'e0 \'f1\'e5\'f0\'e2\'e5\'f0, \'e0 \'f1\'e5\'f0\'e2\'e5\'f0 \'e2\'ee\'e7\'e2\'f0\'e0\'f9\'e0\'e5\'f2 HTTP-\'ee\'f2\'e2\'e5\'f2.\par
\b HTTP-\'e7\'e0\'ef\'f0\'ee\'f1 \'f1\'ee\'f1\'f2\'ee\'e8\'f2 \'e8\'e7:\b0\par
\'d1\'f2\'f0\'ee\'ea\'e8 \'e7\'e0\'ef\'f0\'ee\'f1\'e0:\par
\'cc\'e5\'f2\'ee\'e4 (\'ed\'e0\'ef\'f0\'e8\'ec\'e5\'f0, GET, POST, PUT, DELETE).\par
URI (Uniform Resource Identifier) - \'ef\'f3\'f2\'fc \'ea \'e7\'e0\'ef\'f0\'ee\'f8\'e5\'ed\'ed\'ee\'ec\'f3 \'f0\'e5\'f1\'f3\'f0\'f1\'f3.\par
\'c2\'e5\'f0\'f1\'e8\'ff \'ef\'f0\'ee\'f2\'ee\'ea\'ee\'eb\'e0 (\'ed\'e0\'ef\'f0\'e8\'ec\'e5\'f0, HTTP/1.1).\par
\'cf\'f0\'e8\'ec\'e5\'f0: GET /index.html HTTP/1.1\par
\'c7\'e0\'e3\'ee\'eb\'ee\'e2\'ea\'e8:\par
\'c4\'ee\'ef\'ee\'eb\'ed\'e8\'f2\'e5\'eb\'fc\'ed\'e0\'ff \'e8\'ed\'f4\'ee\'f0\'ec\'e0\'f6\'e8\'ff \'ee \'e7\'e0\'ef\'f0\'ee\'f1\'e5, \'ed\'e0\'ef\'f0\'e8\'ec\'e5\'f0, User-Agent, Host, Content-Type, Accept.\par
\'cf\'f0\'e8\'ec\'e5\'f0:\par
Host: {{\field{\*\fldinst{HYPERLINK www.example.com }}{\fldrslt{www.example.com\ul0\cf0}}}}\f0\fs22\par
User-Agent: MyBrowser/1.0\par
\'d2\'e5\'eb\'ee \'e7\'e0\'ef\'f0\'ee\'f1\'e0 (\'ed\'e5\'ee\'e1\'ff\'e7\'e0\'f2\'e5\'eb\'fc\'ed\'ee):\par
\'c4\'e0\'ed\'ed\'fb\'e5, \'ee\'f2\'ef\'f0\'e0\'e2\'eb\'ff\'e5\'ec\'fb\'e5 \'ed\'e0 \'f1\'e5\'f0\'e2\'e5\'f0 (\'ed\'e0\'ef\'f0\'e8\'ec\'e5\'f0, \'e2 \'f1\'eb\'f3\'f7\'e0\'e5 POST-\'e7\'e0\'ef\'f0\'ee\'f1\'e0).\par
\b HTTP-\'ee\'f2\'e2\'e5\'f2 \'f1\'ee\'f1\'f2\'ee\'e8\'f2 \'e8\'e7:\b0\par
\'d1\'f2\'f0\'ee\'ea\'e8 \'f1\'ee\'f1\'f2\'ee\'ff\'ed\'e8\'ff:\par
\'c2\'e5\'f0\'f1\'e8\'ff \'ef\'f0\'ee\'f2\'ee\'ea\'ee\'eb\'e0.\par
\'ca\'ee\'e4 \'f1\'ee\'f1\'f2\'ee\'ff\'ed\'e8\'ff (\'ed\'e0\'ef\'f0\'e8\'ec\'e5\'f0, 200 OK, 404 Not Found, 500 Internal Server Error).\par
\'d1\'ee\'ee\'e1\'f9\'e5\'ed\'e8\'e5 \'f1\'ee\'f1\'f2\'ee\'ff\'ed\'e8\'ff.\par
\'cf\'f0\'e8\'ec\'e5\'f0: HTTP/1.1 200 OK\par
\'c7\'e0\'e3\'ee\'eb\'ee\'e2\'ea\'e8 \'ee\'f2\'e2\'e5\'f2\'e0:\par
\'c4\'ee\'ef\'ee\'eb\'ed\'e8\'f2\'e5\'eb\'fc\'ed\'e0\'ff \'e8\'ed\'f4\'ee\'f0\'ec\'e0\'f6\'e8\'ff \'ee\'e1 \'ee\'f2\'e2\'e5\'f2\'e5, \'ed\'e0\'ef\'f0\'e8\'ec\'e5\'f0, Server, Content-Type, Content-Length.\par
\'cf\'f0\'e8\'ec\'e5\'f0:\par
Server: Apache/2.4.18\par
Content-Type: text/html\par
Content-Length: 1234\par
\'d2\'e5\'eb\'ee \'ee\'f2\'e2\'e5\'f2\'e0 (\'ee\'e1\'fb\'f7\'ed\'ee \'f1\'ee\'e4\'e5\'f0\'e6\'e8\'f2 \'e7\'e0\'ef\'f0\'ee\'f8\'e5\'ed\'ed\'fb\'e9 \'f0\'e5\'f1\'f3\'f0\'f1):\par
HTML-\'f1\'f2\'f0\'e0\'ed\'e8\'f6\'e0, \'e8\'e7\'ee\'e1\'f0\'e0\'e6\'e5\'ed\'e8\'e5, \'e4\'e0\'ed\'ed\'fb\'e5 JSON \'e8 \'f2.\'e4.\par
\b\'d0\'e5\'e0\'eb\'e8\'e7\'e0\'f6\'e8\'ff HTTP \'e2 C++\b0\par
\'c2 C++ \'ec\'ee\'e6\'ed\'ee \'e8\'f1\'ef\'ee\'eb\'fc\'e7\'ee\'e2\'e0\'f2\'fc \ldblquote\'f7\'e8\'f1\'f2\'fb\'e5\rdblquote  \'f1\'ee\'ea\'e5\'f2\'fb (\'ed\'e8\'e7\'ea\'ee\'f3\'f0\'ee\'e2\'ed\'e5\'e2\'fb\'e5 API) \'e8\'eb\'e8 \'f1\'ef\'e5\'f6\'e8\'e0\'eb\'e8\'e7\'e8\'f0\'ee\'e2\'e0\'ed\'ed\'fb\'e5 \'e1\'e8\'e1\'eb\'e8\'ee\'f2\'e5\'ea\'e8 \'e4\'eb\'ff \'f0\'e0\'e1\'ee\'f2\'fb \'f1 HTTP. \'c8\'f1\'ef\'ee\'eb\'fc\'e7\'ee\'e2\'e0\'ed\'e8\'e5 \'e1\'e8\'e1\'eb\'e8\'ee\'f2\'e5\'ea \'e7\'ed\'e0\'f7\'e8\'f2\'e5\'eb\'fc\'ed\'ee \'f3\'ef\'f0\'ee\'f9\'e0\'e5\'f2 \'ef\'f0\'ee\'f6\'e5\'f1\'f1, \'f2\'e0\'ea \'ea\'e0\'ea \'ee\'ed\'e8 \'e1\'e5\'f0\'f3\'f2 \'ed\'e0 \'f1\'e5\'e1\'ff \'e1\'ee\'eb\'fc\'f8\'f3\'fe \'f7\'e0\'f1\'f2\'fc \'ee\'e1\'f0\'e0\'e1\'ee\'f2\'ea\'e8 HTTP.\par
\b\'c8\'f1\'ef\'ee\'eb\'fc\'e7\'ee\'e2\'e0\'ed\'e8\'e5 \ldblquote\'f7\'e8\'f1\'f2\'fb\'f5\rdblquote  \'f1\'ee\'ea\'e5\'f2\'ee\'e2 (\'ef\'f0\'e8\'ec\'e5\'f0 \'ea\'eb\'e8\'e5\'ed\'f2\'e0):\b0\par
#include <iostream>\par
#include <string>\par
#include <cstring>\par
#include <sys/socket.h>\par
#include <netinet/in.h>\par
#include <arpa/inet.h>\par
#include <unistd.h> // \'e4\'eb\'ff close()\par
int main() \{\par
    int sock = socket(AF_INET, SOCK_STREAM, 0);\par
    if (sock == -1) \{\par
        std::cerr << "Failed to create socket" << std::endl;\par
        return 1;\par
    \}\par
    sockaddr_in server_addr;\par
    server_addr.sin_family = AF_INET;\par
    server_addr.sin_port = htons(80); // HTTP port\par
    inet_pton(AF_INET, "127.0.0.1", &(server_addr.sin_addr)); // IP address\par
    if (connect(sock, (sockaddr*)&server_addr, sizeof(server_addr)) == -1) \{\par
        std::cerr << "Failed to connect" << std::endl;\par
        close(sock);\par
        return 1;\par
    \}\par
    std::string request = "GET / HTTP/1.1\\r\\nHost: 127.0.0.1\\r\\nConnection: close\\r\\n\\r\\n";\par
    send(sock, request.c_str(), request.length(), 0);\par
    char buffer[4096];\par
    int bytes_received;\par
    while ((bytes_received = recv(sock, buffer, sizeof(buffer), 0)) > 0) \{\par
        std::cout.write(buffer, bytes_received);\par
    \}\par
    close(sock);\par
    return 0;\par
\}\par
\b\'c8\'f1\'ef\'ee\'eb\'fc\'e7\'ee\'e2\'e0\'ed\'e8\'e5 \'e1\'e8\'e1\'eb\'e8\'ee\'f2\'e5\'ea\'e8 libcurl (\'ef\'f0\'e8\'ec\'e5\'f0 \'ea\'eb\'e8\'e5\'ed\'f2\'e0):\b0\par
#include <iostream>\par
#include <curl/curl.h>\par
size_t WriteCallback(void *contents, size_t size, size_t nmemb, std::string *output) \{\par
    size_t total_size = size * nmemb;\par
    output->append((char*)contents, total_size);\par
    return total_size;\par
\}\par
int main() \{\par
    CURL *curl;\par
    CURLcode res;\par
    curl_global_init(CURL_GLOBAL_DEFAULT);\par
    curl = curl_easy_init();\par
    if(curl) \{\par
        std::string output;\par
        curl_easy_setopt(curl, CURLOPT_URL, "{{\field{\*\fldinst{HYPERLINK http://127.0.0.1 }}{\fldrslt{http://127.0.0.1\ul0\cf0}}}}\f0\fs22 "); // URL to request\par
        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, WriteCallback);\par
        curl_easy_setopt(curl, CURLOPT_WRITEDATA, &output);\par
        res = curl_easy_perform(curl);\par
        if(res != CURLE_OK)\par
            std::cerr << "curl_easy_perform() failed: " << curl_easy_strerror(res) << std::endl;\par
        else\par
           std::cout << output << std::endl;\par
        curl_easy_cleanup(curl);\par
    \}\par
    curl_global_cleanup();\par
    return 0;\par
\}\par
\b\'d0\'e5\'e0\'eb\'e8\'e7\'e0\'f6\'e8\'ff HTTP \'e2 C#\b0\par
C# \'e8\'ec\'e5\'e5\'f2 \'e2\'f1\'f2\'f0\'ee\'e5\'ed\'ed\'f3\'fe \'ef\'ee\'e4\'e4\'e5\'f0\'e6\'ea\'f3 HTTP \'f1 \'e8\'f1\'ef\'ee\'eb\'fc\'e7\'ee\'e2\'e0\'ed\'e8\'e5\'ec \'ea\'eb\'e0\'f1\'f1\'e0 HttpClient.\par
\b\'cf\'f0\'e8\'ec\'e5\'f0 \'ea\'eb\'e8\'e5\'ed\'f2\'e0 \'e2 C#:\b0\par
using System;\par
using System.Net.Http;\par
using System.Threading.Tasks;\par
class Program\par
\{\par
    static async Task Main(string[] args)\par
    \{\par
        using (HttpClient client = new HttpClient())\par
        \{\par
            try\par
            \{\par
                HttpResponseMessage response = await client.GetAsync("{{\field{\*\fldinst{HYPERLINK http://127.0.0.1 }}{\fldrslt{http://127.0.0.1\ul0\cf0}}}}\f0\fs22 "); // URL to request\par
                response.EnsureSuccessStatusCode();\par
                string responseBody = await response.Content.ReadAsStringAsync();\par
                Console.WriteLine(responseBody);\par
            \}\par
            catch (HttpRequestException e)\par
            \{\par
                Console.WriteLine($"Request error: \{e.Message\}");\par
            \}\par
        \}\par
    \}\par
\}\par
\b\'cf\'f0\'e8\'ec\'e5\'f0 \'f1\'e5\'f0\'e2\'e5\'f0\'e0 \'e2 C# (\'f1 \'e8\'f1\'ef\'ee\'eb\'fc\'e7\'ee\'e2\'e0\'ed\'e8\'e5\'ec HttpListener):\b0\par
using System;\par
using System.Net;\par
using System.Text;\par
using System.Threading.Tasks;\par
class HttpServer\par
\{\par
    public static async Task RunServer()\par
    \{\par
        HttpListener listener = new HttpListener();\par
        listener.Prefixes.Add("http://127.0.0.1:8080/");\par
        listener.Start();\par
        Console.WriteLine("Listening on {{\field{\*\fldinst{HYPERLINK http://127.0.0.1:8080/ }}{\fldrslt{http://127.0.0.1:8080/\ul0\cf0}}}}\f0\fs22 ");\par
        while (true)\par
        \{\par
            HttpListenerContext context = await listener.GetContextAsync();\par
            HttpListenerRequest request = context.Request;\par
            HttpListenerResponse response = context.Response;\par
\par
            string responseString = "<html><body><h1>Hello from C# HTTP Server!</h1></body></html>";\par
            byte[] buffer = Encoding.UTF8.GetBytes(responseString);\par
\par
            response.ContentLength64 = buffer.Length;\par
            System.IO.Stream output = response.OutputStream;\par
            output.Write(buffer, 0, buffer.Length);\par
            output.Close();\par
        \}\par
    \}\par
    static void Main(string[] args)\par
    \{\par
        RunServer().GetAwaiter().GetResult();\par
    \}\par
\}\f2\lang9\par
}
 